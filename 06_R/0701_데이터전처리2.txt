★ apply계열 함수를 이용하면 반복문 사용보다 코드최소화, 수행 속도 빠름

 - apply : 행렬이나 배열 차원별로 지정한 함수 적용(벡터로 반환)
apply(iris[,1:4], 2, mean)    # 열별 평균
apply(iris[,1:4], 1, mean)    # 행별 평균

 - lapply : list apply (함수를 적용한 결과를 list로 반환)
lapply(iris[1:4], mean)

 - sapply : lapply와 유사하나 결과를 리스트 대신 행렬, 벡터로 반환
sapply(iris[1:4], mean)

 - vapply : sapply와 유사하나 FUN의 모든 값이 FUN.VALUE와 호환되는지 확인
vapply(iris[1:4], mean, FUN.VALUE = numeric(1))

 - mapply : 함수 적용시 여러개의 인자를 함수에 전달
mapply(rep, x=1:4, times=4:1) 




★ 그룹화 처리
 - tapply : 1개 열에 대해 1개의 함수로 그룹화 처리
tapply(iris$Sepal.Length, iris$Species, FUN=mean)

 - by : 1개이상의 열에 대해 1개의 함수로 그룹화 처리(1개 이상의 열 mean, sd X)
by(iris[,c('Sepal.Length','Sepal.Width')], iris['Species'], FUN=summary)

 - summaryBy : 1개이상의 열에 대해, 1개 이상의 함수로 1개 이상의 그룹화 처리
summaryBy(Sepal.Length+Petal.Length ~ Species, iris, FUN=c(mean, sd, median))

 - aggregate : 1개이상의 열에 대해, 1개의 함수로 1개 이상의 그룹화 처리
aggregate(iris[,1:4], by=list(iris[,5]), FUN=mean)




★ doBy 패키지
 - summaryBy : 1개이상의 열에 대해, 1개 이상의 함수로 1개 이상의 그룹화 처리
summaryBy(Sepal.Length+Petal.Length ~ Species, iris, FUN=c(mean, sd, median))

 - orderBy : 열(변수)기준 정렬한 데이터 프레임
orderBy(~Sepal.Length+Petal.Length, data=iris)    # '-'로 바꾸면 내림차순

 - sampleBy : 그룹별 데이터를 sampling
sampleBy(~Species, data=iris, frac=0.2, replace = TRUE) # 종별 20%씩 복원추출 (중복 데이터 있음)
sampleBy(~Species, data=iris, frac=0.1, systematic = TRUE) # 계층적(계통) 추출 (ex. 1번째 10번째.. 데이터)




★ 데이터 추출과 분리
 - split(데이터 프레임, 분리조건이나 분리그룹변수) : list형태로 데이터 분리
iris.species <- split(iris, iris$Species)     # 종별로 iris데이터를 분리
iris.sepal <- split(iris, iris$Sepal.Length > m)     # m <- mean(iris$Sepal.Length)

 - subset(데이터프레임, subset=행조건, select=출력될변수) : 데이터 추출
subset(iris, subset=Sepal.Length>=4, select=c(1,3,5))
iris[iris$Sepal.Length>=4, c(1,3,5)]




★ 데이터 합치기
 - cbind() : 열합치기(컬럼합치기)
 - rbind() : 행합치기
 - merge() : 병합하기   # all을 이용하면 NA데이터도 누락없이 병합 가능




★ 데이터 정렬
 - sort() : 정렬한 데이터를 반환    # decreasing = TRUE <--- 내림차순
 - order() : 정렬한 색인을 반환




★ 데이터 집계
 - table : 그룹별 갯수 집계




★ 조건으로 색인찾기 : which(), which.min(), which.max()



