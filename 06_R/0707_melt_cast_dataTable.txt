## melt, cast : 데이터 구조를 변경

library(reshape2)




# melt : 녹여서 넓은 자료를 길게 재구조화 
airquality.melt <- melt(airquality, id=c('Month','Day'), value.name = "val")

> head(airquality, 1)
  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1

> head(airquality.melt, 1)
  Month Day variable val
1     5   1    Ozone  41




# cast(dcast vs acast) : 주조하여 긴 자료를 짧게 변수로 재구조화 

airquality.dc <- dcast(airquality.melt, Month+Day~variable)

> head(airquality.dc, 1)
  Month Day Ozone Solar.R Wind Temp
1     5   1    41     190  7.4   67
(식별자(Month+Day)가 열로 변환)  -> 데이터프레임 형태로 변환


airquality.ac <- acast(airquality.melt, Month+Day ~ variable)

> head(airquality.ac,1)
    Ozone Solar.R Wind Temp
5_1    41     190  7.4   67
(식별자(Month+Day)가 행번호로 변환) -> 벡터 행렬 배열 형태로 변환






## 데이터 테이블 : 짧고 유연한 빠른 구문을 사용하기 위해 데이터프레임에서 상속받음

library("data.table")
flights <- fread('inData/flights14.csv')


*장점 (이런 것도 가능)
flights[order(origin, -dest)]       # 숫자가 아니여도 -로 정렬 가능
flights[, year:dep_time]       # 변수명으로 A부터 B까지 열출력 가능
flights[, .(년도=year, 실제출발=dep_time)]      # 출력 변수명 수정 가능
flights[origin=='JFK'& month==6, .(mean_arr = mean(arr_delay), 
                                   mean_dep = mean(dep_delay))]
flights[origin=='JFK'&month==6, .N]      # .N을 사용하여 갯수 출력
flights[origin=='JFK'&month==6, -c("arr_delay", "dep_delay")]      # -를 사용하여 열제외 가능
flights[carrier=='AA', .(mean_arr = mean(arr_delay), mean_dep = mean(dep_delay)),
        by=.(origin, dest, month)]       # 가준 : 출발지, 도착지, 월별  /  계산 : 평균(도착 딜레이, 출발 딜레이)
flights[, .(.N), by=.(dep_delay>0, arr_delay>0)]       # 참, 거짓 별 갯수 출력(참참, 참거짓, 거짓거짓, 거짓참)









