## 연관분석 개요

1. 데이터들 사이에서 자주 발생하는 속성을 찾고, 그 속성들 사이에 연관성이 어느 정도 있는지를 분석하는 방법

2. 활용분야 : 상품진열, 사기보험적발, 카탈로그 디자인, 신상품 카테고리 구성 ```

3. {조건} => {결과} 
     {소주, 콜라} => {와인} : 소주와 콜라를 사면 와인을 산다 
     {와인} => {소주, 콜라} : 와인을 사면 소주와 콜라를 산다
      ---> 위 2가지는 다른 의미임. 
      ---> 이렇게 도출된 연관성 규칙들은 지지도, 신뢰도, 향상도를 통해 얼마나 의미있는 규칙인지 평가

4. 연관분석 관련 지표 

     지지도(support) = 조건결과항목수 / 전체수
     ---> 전체 거래 중 연관성 규칙을 구성하는 항목들이 포함된 거래의 비율

     신뢰도(confidence) = 조건결과항목수 / 조건항목수
     ---> 조건이 발생했을 때 결과가 동시에 일어날 확률

     향상도(lift) = 조건결과지지도 / ( (조건지지도)*(결과지지도) )
     ---> 우연히 발생한 규칙인지 아닌지 여부
              1 : 조건과 결과는 우연한 관계일 뿐 연관성 전혀 없음
            >1 : 양의 상관관계 (의미있는 연관성을 가진 규칙으로 해석)
            <1 : 음의 상관관계

     ex. {조건} => {결과} 지지도     신뢰도     향상도 
          {주스} => {콜라} 2/5(0.4)    2/2(1)       0.4 / (0.4 1) = 1
          {소주} => {맥주} 1/5(0.2)    1/3(0.3)     0.2 / (0.6 0.4) = 0.8333 






## 연관분석

pip install apyori
from apyori import apriori

transaction = [['소주', '콜라', '와인'],  ['소주', '오렌지주스', '콜라'],  ['맥주', '콜라', '와인'],
                      ['소주', '콜라', '맥주'], ['오렌지주스', '와인']]
rules = apriori(transaction, min_support=0.2, min_confidence=0.1)


# 데이터프레임으로 출력하기
result_df = pd.DataFrame(None,
                        columns=['lhs','rhs','support','confidence','lift'])
index = 0
for row in rules:
    support = row[1]
    ordered_st = row[2]
    for item in ordered_st:
        lhs = ','.join([x for x in item[0]])
        rhs = ','.join([x for x in item[1]])
        confidence = item[2]
        lift       = item[3]
        if lift > 1:
            result_df.loc[index] = [lhs, rhs, support, confidence, lift]
            index += 1
result_df.sort_values(by='confidence')




