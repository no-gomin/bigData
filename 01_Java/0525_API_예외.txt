## Scanner
nextInt : int값을 입력
next : String값을 입력
nextLine : 스페이스 포함하여 |n 이전까지만 인식하고 그뒤는 버림. 사용시 주의 필요.
---------> 버퍼를 정리할 때도 사용




## Wrapper : 기초데이터의 객체데이터화




## Timer
객체 클래스에서 TimerTask를 상속받아, run을 오버라이드 해줘서 사용한다
timer.schedule(ex1, 2000); // ex1작업을 2초후에 한번 실행
timer.schedule(ex2, 500, 1000); //ex2작업을 0.5초후에 1초마다 실행
Thread.sleep(10000); // 10초 대기




## decimalFormat
DecimalFormat("000000000") // 무조건 자릿수를 맞춤
DecimalFormat("#########") // 데이터에 자릿수를 맞춤




## 예외(Exception) : 자바는 예외를 객체로 취급. 예외가 발생하면 예외 객체가 생성됨.
try {
	System.out.println("iArr["+i+"] = "+iArr[i]);     // 익셉션이 발생할 가능성이 있는 명령문
}catch(ArrayIndexOutOfBoundsException e) {               // 익센셥타입, catch는 여러개도 가능
	System.out.println("예외메세지 : "+e.getMessage());      // 익셉션을 처리하는 명령문
} finally {
	System.out.println("try절 실행후에도, catch절 샐행후에도 여기는 반드시 실행");
}




## throws : 나를 호출한(실행시키는) 쪽으로 예외를 던져버림
--> 계속 throw 할 수 없으니 어딘가에서는 try + catch를 해야함.




## 강제 예외
throw new Exception(money+"원 출금하기에는 잔액("+balance+")이 부족합니다"); // (~~~)의 오류메시지 처리






