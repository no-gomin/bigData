## 상속 : 부모 클래스의 속성과 메소드를 모두 상속받아 자식 클래스에서 사용가능.

사용 이유
1. 개발 시간 단축이 가능.
2. 이미 검증이 되어있기 때문에 시행착오를 줄일 수 있음.
3. 하나의 객체(타입)으로 묶을 수 있음. (부모 클래스 객체타입으로)





## 오버라이드(ovverride) : 재정의
부모와 자식간 동일한 메소드에 대하여 
---> 자식클래스에서 정의한 것으로 재정의 함. 덮어쓰기 개념. (1개 -> 1개) 

## 생성자 오버로딩(overloading=polymorphism) : 중복정의
부모와 자식간 동일한 메소드에 대하여
---> 매개변수 개수 등을 다르게 하여 또 하나의 메소드를 만드는 것. (1개 -> 2개)





## super. 그리고 super()
super.     // 슈퍼클래스의   (사용법 : this. 와 같음)
super();     // 매개변수 없는 슈퍼클래스의 생성자 호출
super(매개변수);     // 매개변수 있는 슈퍼클래스의 생성자 호출 (반드시 첫번째 줄(line)에 와야함)

	public Student(String id, String name, String ban) {
		super(id, name);
		this.ban = ban;	}      
	// id, name으로 매개변수 있는 슈퍼클래스 생성자 호출 + 동시에 ban은 Student 생성자 호출


