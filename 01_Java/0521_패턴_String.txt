## 패턴 : 선배 개발자들이 가장 효율적으로 개발이 가능하도록 만들어 놓은 일종의 프레임

- 싱글톤 패턴(Singleton pattern) : 오직 하나뿐인 객체만 생성가능하여, 어떠한 상황에서 동일한 객체에 접근하도록 만든 패턴

private static SingletonClass INSTANCE;
	public static SingletonClass getInstance() {
		if(INSTANCE == null) {
			INSTANCE = new SingletonClass();
		}
		return INSTANCE;
// private 으로 하여 객체생성을 닫고, getInstance 메소드를 통해 객체를 생성하도록 함.
// 생성된 객체가 있으면 새로 생성하여 그주소를 return, 이미 생성된 객체가 있으면 기존객체의 주소를 return




## String : 기초데이터가 아닌, 객체자료형임. 그런데 기초데이터처럼 만들어 사용함 (String str = "AAA")

String str1 = "Java";  // 기존에 "Java" 내용의 객체가 있는 경우, 새로 생성하지 않고 주소를 공유하여 사용함.
String str2 = new String("Java");   // 무조건 새로운 객체를 생성하여 사용함.

- 주요 기능(메소드)
	String concat(String str) : 저장된 문자열과 str문자열을 결합
	String substring(int begin) : 시작위치부터 마지막까지의 문자열을 반환
	int length() : 문자열 길이를 반환
	String toUpperCase() : 대문자로 반환
	String toLowerCase() : 소문자로 반환
	char charAt(int index) : index 위치의 문자를 반환
	int indexOf(char ch) : 첫번째 ch문자의 위치를 반환
	int lastIndexOf(char ch) : 마지막 ch문자의 위치를 반환
	boolean equals(String str) : 지정된문자열과 str문자열이 같은지 비교
	boolean equalslgnoreCase(String str) : 대소문자구분없이 지정된문자열과 str문자열이 같은지 비교
	String trim() : 문자열 앞뒤 공백제거
	String replace(char old, char new) : 문자열 내의 old문자를 new문자로 반환
	String repalceAll(String old, String new) : 문자열 내의 old문자열을 new로 반환








