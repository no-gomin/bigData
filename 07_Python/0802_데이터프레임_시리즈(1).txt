## 판다스 패키지

pip install pandas
import pandas as pd

- numpy를 기반으로 함.
- 시리즈 : 1차원 구조 // 데이터프레임 : 2차원 구조
- 결측치 처리, 크기변경(열삽입, 삭제), 데이터 정렬, 데이터 분할, 병합, 데이터 프레임 생성, 부분 데이터 셋 추출, 피벗과 언피벗, 레이블링, 파일입출력 등에 용이

- 참고 사이트
https://pypi.python.org/pypi/pandas (package index)
http://pandas.pydata.org/pandas-docs/stable/api.html (API reference)





## 데이터프레임 만들기 & 불러오기

df = pd.DataFrame({'kor':kor, 'mat':mat})   # kor과 mat는 list형태
df = pd.DataFrame(np.c_[kor, mat], columns=['kor', 'mat'])    # kor과 mat는 array형태

data = pd.read_json('data/ch09_member1.json', encoding='cp949')
iris = pd.read_hdf('data/ch09_iris2.hdf5', key='iris')

member_df = pd.read_csv('data/ch12_member.csv', encoding='UTF-8', sep=',')
member_df = pd.read_csv('data/ch12_member.csv', sep=',', skiprows=[1,3])   # 특정해 제외
member_df = pd.read_csv('data/ch12_member.csv', nrows=3)   # 첫 3행만
member_df = pd.read_csv('data/ch12_member.csv', comment='#')   # 주석행은 제거





## 행, 열, 레벨 이름 지정하기 + 정렬

member_df.columns = ['이름','나이','이메일','주소']
member_df.index = ['동','서','남','북']

member = member_df.set_index('Name')   # 첫번째 열인 'Name'을 행이름으로...
member.reset_index()   # 행이름을 첫번째 열로 편입

member_df.columns=[['기본정보','기본정보','추가정보','추가정보'], ['이름','나이','이메일','주소']]
member_df.columns.names = ['대분류','소분류']
# [대분류]    [기본정보   ]     [추가정보     ]
# [소분류]    [이름] [나이]      [이메일] [주소]

member_df.sort_index(axis=0)  # 행이름의 순서를 정렬 // 0대신 'rows'로도 가능
member_df.sort_index(axis=1)  # 열이름의 순서를 정렬 // 1대신 'columns'로도 가능
member_df.sort_values(by='Age', ascending=False)    #  값을 기준으로 내림차순(당연 행순서 바뀜)





## 데이터 조회

member_df['Name']   # 한개의 열 ->  member_df.Name # 동일 자료를 시리즈로 조회

member_df.loc[0:2]    # 0~2행(2행 포함)
member_df.loc['동':'남', 'Name':'Email']   # : 는 부터~까지 , , 는 지정한 데이터

member_df.iloc[0:3, 1:3]   # 0~2행, 1~2열
member_df.iloc[2]    # 2index의 행 모든 열 출력
member_df.iloc[::-1]   # 행순서 거꾸로

iris_df[(iris_df['Species']=='versicolor') & (iris_df['Sepal.Length']>6.5) ]    # 조건에 맞는 모든 열
iris_df.loc[iris_df['Sepal.Length']>=7.2, ['Sepal.Length','Sepal.Width']]   # 조건에 맞는 2개의 열

member_df.isna().sum()   # 결측치 갯수 확인 -> member_df.isnull().sum()
member_df.loc[member_df.Address.str.find('강서구') != -1, 'Name':'Age']    # 조건 맞는 행의 N~A열







