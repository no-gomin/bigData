## 객체와 클래스

class 클래스명(상속받을 클래스명) :
	'docstring'
	변수나 함수들을 선언
변수명 = 클래스명

#pass : 함수에서 아무것도 하지 않고 그냥 넘어간다는 의미





## 변수와 메소드

class Person:
    name = "홍길동"  # 변수 추가
    def print_info():   # 메소드 추가
        print("{}입니다".format(Person.name))

class Person :
    name = "홍길동"
    def print_info(self) :   # 인스턴스 메소드(객체를 통해서만 호출할 수 있는 함수)
        print('{}입니다'.format(self.name))

class Person :
    name = '홍길동'
    @classmethod   # 클래스 메소드 : 클래스에 직접 접근하는 메소드 (cls 또는 clazz 인자 사용)
    def do_(cls) :
        cls.name = '신사임당'
        print('{}입니다.'.format(cls.name))
    @staticmethod   # 스태틱 메소드 : 클래스 안에서만 정의 및 사용 가능함 (인자 없음)
    def that_() :
        print('{}입니다.'.format(Person.name))




## 생성자(__init__) 와 소멸자(__del__)

class Person:
    def __init__(self, name = '홍길동', gender = '남자'):
        self.name = name
        self.gender = gender
        print('객체 생성')
    def __del__(self):
        print('객체 소멸')
    def __str__(self):
        return "%s는 %s입니다" % (self.name, self.gender)
- 모두 가능 : p1 = Person("홍길동","남자"), p2 = Person("박길동"), p3 = Person()
- __init__() : 객체가 생성될 때 자동으로 실행
- __del__() : 객체가 소멸될 때 자동으로 실행 (객체의 레퍼런스 카운트가 0일때 소멸됨)





## 상속과 재정의

class Student(Person) : 
    def __init__(self, name, gender, major) :
        super().__init__(name, gender) 
           # 부모클래스의 생성자를 호출하여 초기화 (Person.__init__(self, name, gender)로 바꿔도됨)
        self.major = major
    def __del__(self):
        pass
    def __str__(self) :
        return super().__str__() + '추가로 전공은 {} 입니다.'.format(self.major)
                 #  super().__str__() --> Person.__str__(self) 로 바꿔도 됨.
---> 생성 후 print 하면 --> 홍길동은 남자입니다. 추가로 전공은 빅데이터 입니다.





