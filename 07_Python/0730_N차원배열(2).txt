## 기본 연산동작

# 배열의 요소별 연산 ( a=[20,30,40,50], b=[0,1,2,3]
a + b    # array([20, 31, 42, 53])
a - b   # array([20, 29, 38, 47])
a ** b    # array([     1,     30,   1600, 125000], dtype=int32)
a < 35    # array([ True,  True, False, False])
a[a>35]   # array([40, 50])


# 행렬의 곱 (@, dot함수) vs 요소별 곱 (A*B)
A*B   # [[2 0] [0 4]]
A@B   # [[2 0] [3 4]]
A.dot(B)   # [[2 0] [3 4]]


# 복합  대입 연산자  (+=, -=, *=, ....)
a += 3   # a = a+3
b += a   # b = b+a
a += b   # a = a+b 에러 . b가 float64이여서 a+b가 float64이기때문에


# 배열 요소별 집계 : 배열요소 전체의 sum, min, ...
a.sum()
a.mean()
a.min()
a.max()
a.var()   # 전체 분산
a.std()   # 전체 표준편차


# 배열 축별 집계 : 행별 sum, min,.. 열별 sum, min,...

a.sum(axis=1))   # (열을 고정) 같은 행별 합
a.max(axis=0))   # (행을 고정) 같은 열별 최대값
a.cumsum(axis=1)   # (열을 고정) 같은 행별 누적합
np.sqrt(a.var())   # 분산에 루트 씌우면 표준편차 // 매개변수에는 스칼라값
b.sum(axis=2) # [3차원 배열, 열은 고정하고] 같은 면,행끼







## 그 외 함수 (난수발생 : 1차원 배열, 요소 연산)

np.add(a,b)   # a+b를 메모리를 절약하여 처리
np.random.rand(5)    # 0 ~ 1미만의 난수 5개 발생(균일분포에서 난수)
np.random.randn(5) # 평균0이고 표준편차1인 정규분포(표준정규분포)에서 난수 5개 발생
np.random.randint(5) # 0부터 5미만의 정수 난수 발생






## 브로드 캐스팅

배열간 크기가 다를 때 연산을 할 수 있도록 만들어 줌.
- 어느 하나의 배열의 차원(행이든 열이든)이 1이면 가능
- 두 배열의 차원에 대해 축의 길이가 동일하면 가능






