## 포맷팅 : 출력할 문자, 숫자, 날짜 데이터에 형식을 지정하는 것

# 이전 스타일
# %s문자, %d:숫자(10진수정수), %f:실수
"%s님의 나이는 %d살입니다" % (name, age)

# 새로운 스타일
"{}님의 나이는 {}살입니다".format(name, age)
"{1}님의 나이는 {0}살입니다".format(age, name)





## format()함수

# "{[인덱스]:[공백대체문자][정렬방법][자릿수][타입]}".format(변수명,...)

1. 인덱스 : format함수안 인수의 순서
2. 정렬방법 : <기호:왼쪽 정렬, >기호:오른쪽정렬, ^기호:가운데정렬
3. 자릿수 : 출력할 자릿수 지정. 변수보다 적은 자릿수가 지정되면 자리수 무시
4. 타입 : d(10진수정수), o(8진수), b(3진수) f(실수) s(문자) x(16진수)



# 예시
print("출력 : [{0}], [{0:10}], [{0:3}]".format(a))
출력 : [12345], [     12345], [12345]

print("출력 : [{0:$>10}], [{1:*<20}], [{1:_<10.3}]".format(a, s))
				# 10.3 전체 10자리확보 변수중 3자리만 출력
출력 : [$$$$$$$$10], [Hello***************], [Hel_______]

print("출력 ㅣ [{:=10}], [{:=+10}], [{:=+010}]".format(b, a, a))
출력 ㅣ [-      123], [+      123], [+000000123]



# 특징 및 주의할점

1. 자릿수가 변수보다 크면? 숫자의 경우 오른쪽 정렬(기본값) + 문자의 경우 왼쪽 정렬(기본값)
2. 자릿수가 변수보다 작으면? 무시되고 다 출력
3. 공백대체문자 사용시 반드시 정렬방법을 입력해야 함.
4. 자릿수 앞에 +를 붙이면 음수는 물론, 양수의 경우까지 부호를 붙임
5. 자릿수 앞에 =를 붙이면 음수의 경우만 부호가 제일 앞에 표시됨
6. 자릿수 앞에 0을 넣으면 빈자리에 0을 채움
7. 공백대체문자와 자릿수 앞 0을 동시에 넣으면 자릿수 앞 0은 무시됨






