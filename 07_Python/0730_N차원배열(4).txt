## 복사와 뷰

b = a    # a변수 안의 주소가 할당
c = a.view()    # 앝은 복사 : 새로운 배열 객체를 생성하지만, 데이터를 공유
d = a.copy()   # 깊은 복사 : 정말 별개의 배열 객체를 복사






## 고급인덱싱

a[np.array([1,1,3,8])]   # a의 1번인덱스, 1번인덱스, 3번인덱스, 8번인덱스 요소 반환

array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
i = np.array([[0,1], [1,2]]) #행
j = np.array([[2,1], [3,3]]) # 열
a[i, j]
----> array([[ 2,  5], [ 7, 11]])

ind = data.argmax(axis=0)    # (행을 고정하고) 각 열별 최대값이 있는 index
data[range(data.shape[0]), ind]    # (행을 고정하고) 각 열별 최대값을 반환
data[ind, range(data.shape[1])]    # (열을 고정하고) 각 행별 최대값을 반환

a[a%3==0]    # 3의 배열(True값 반환되는 인덱스)을 반환






## 선형대수

행렬곱 : @ 또는 np.dot()
역행렬 : np.linalg.inv(x)
전치행렬 : x.T, x.transpose()
단위행렬 : np.eye(n) : n행n열 단위행렬
연립방법식 해 풀기 : np.linalg.inv(x, y) 단, x가 정방행렬만 가능

a.T @ a   # 정방행령을 만들고자 할 때 전치행렬 이용

x @ W = y
x의 역행렬 @ x @ W = x의 역행렬 @ y
W = x의 역행렬 @ y

X @ W = Y
X의 역행렬 @ X @ W = X의 역행렬 @ Y
W = X의 역행렬 @ Y

X @ W = Y
X.T @ X @ W = X.T @ Y
(X.T @ X)의 역행렬 @ (X.T @ X) @ W = (X.T @ X)의 역행렬 @ X.T @ Y
W = (X.T @ X)의 역행렬 @ X.T @ Y










